> RUST SETUP
    > rustup : Manages Rust Installation

    > Visual Studio Code : Coding Environment

    > MSVC C++ Build Tools : Needed to build on Windows

    > Steps:
        -> Go To "https://www.rust-lang.org/"
        -> Go To "Install" section
        -> "DOWNLOAD RUSTUP-INIT.EXE (64-BIT)" download it
        -> Open the file
        -> Proceed to Download Visual Studio Installer ("Option 1") -> "MSVC" & "Windows 11 SDK"
            -> Now, check on terminal: "cargo --version"
            -> If it doesnt work, then follow the further steps:

        -> After above Installation, AGAIN OPEN THE ".exe" file
            -> Now, "Proceed with installation (default)"
            -> After THIS Installation, RUST HAS BEEN SETUP ON YOUR PC. It'll work fine
            -> Check "cargo --version" or "rustc --version"

        -> Go to Directory of your choice.
        -> run "cargo init rust_project_folder" -> this will create/initialize a rust project.

> Integer Types
    8 bits make up 1 byte size
    "signed" means that the equal range extends to negative values as well

    i8      signed integers with size of 8 bits (1 byte)          The range is from -128 to 127
    u8      unsigned integers with a size of 8 bits               The range is from 0 to 255
    example: Used for representing small numbers where a negative value is needed (i8), or when only non-negative values are needed (u8)

    i16      signed integers with size of 16 bits (2 bytes)         The range is from -32768 to 32767
    u16       unsigned integers with a size of 16 bits              The range is from 0 to 65535
    example: Useful for scenarios where a larger range of values is needed, like representing temperature in a region

    i32       signed integers with size of 32 bits (4 bytes)         The range is from -2147483648 to 2147483647
    u32       unsigned integers with a size of 32 bits               The range is from 0 to 4294967295
    example: used for representing counts, indices, or quantities in various applications

    i64       signed integers with size of 64 bits (8 bytes)         The range is from -9223372036854775808 to 9223372036854775807
    u64       unsigned integers with a size of 64 bits               The range is from 0 to 18446744073709551615

    i128       signed integers with size of 128 bits (16 bytes)         
    u128       unsigned integers with a size of 128 bits

    "isize" and "usize"     These types are platform-dependent and have a size equal to the size of a memory pointer on the specific architecture
    example: if you Compile the program on a 32-bit system, then isize,usize = i32,u32.

> Variables
    Used to assign data to a temporary memory location
    Immutable by default, but can be mutable
        - use of "immutable" variables increase the speed of your program, because it doesnt need to check if anything is changed or not
        - use "mut" keyword to make them mutable

    example:
        let j = 3;
        let mut var1 = "hello";

> Functions
    fn add(a: i32, b: i32) -> i32 {
        a + b
    }

    SYNTAX: 
    fn(keyword) <name of fn> (<parameters and their type>) -> <return type> {
        program code
    }

> The println! macro

    fn main() {
        println!("hello");
    }

    In this code, "println!" is a macro for printing text to the console.
    The "!" after println indicates that it's a macro, not a regular function.

    ~> What is macro?
        > a macro is a way to write code that writes other code during "compilation". It's a tool for automating repetitive tasks and making your code more concise.
        > When you invoke the macro, it matches the template you've defined and generates code based on the provided values.

        > "macro_rules!" is used to define declarative macros. (TO MAKE YOUR OWN MACRO)

        > example:

            macro_rules! my_macro {
                // pattern and replacement code go here
                ($arg: expr) => {
                    // macro logic using $arg
                };
            }

        -> "my_macro" is the name of the macro.
        -> "$arg:expr" is a pattern that matches an expression passed to the macro.
        -> "=>" separates the pattern from the replacement code.
        { /* code */ } contains the replacement code with "$arg" being replaced by the actual argument.

        > How Macros Work?
            -> Macros use pattern matching to match the structure of the code provided as arguments
            -> The matched patterns are replaced with the specified code
            -> The macro invocation expands to the generated code during the compilation phase
        
        > Why Use Macro?
            -> Domain-Specific Languages (DSLs):
                Macros enable the creation of DSLs, allowing you to design syntax that is specific to your problem domain.

            -> Code Generation at Compile-Time:
                Macros are evaluated at compile-time. 
                They generate code before your program runs.

            -> Textual Transformation:
                Macros perform textual transformation of the code. 
                They can take code as input, analyze its structure, and generate different code based on that structure.

    Anyways returning back to "println!"...

    -> Another key detail:
        fn main() {
            let life = 42;
            println!("{:?}", life);
            println!("{life:?}");
            println!("{}", life);
            println!("{life}");
        }

        -> "{:?}" or "{varname:?}" is typically used for debugging. prints the value using Rust's "Debug" trait.
        -> "{}" or "{varname}" is used for general-purpose printing. prints the value using Rust's "Display" trait.

> Control Flow (Conditional Statements)
    "if", "else", "else if"

    fn main() {
        let a = 201;
        if a > 200 {
            println!("HUGE1");
        } else if a > 99 {
            println!("BIG1");
        } else {
            println!("SMALL1");
        }
        
        if a > 99 {
            println!("BIG2");
        } else if a > 200 {
            println!("HUGE2");
        } else {
            println!("SMALL2");
        }
    }

> Iterations/Repititions/LOOPS
    "loop" - infinite loop (keeps on going unless it finds a "breaking" condition)
    "while" - conditional loop

    > "LOOP"

        fn main () {
            let mut a = 0;
            loop {
                if a == 5 {
                    break;
                }
                println!("{a:?}");
                a = a + 1;
            }
        }

        > the "break;" will break us out of the "loop" block, and execute the next code which comes after the "loop"

        > Two types in "LOOP":
            - Unlabeled Loop -> normal loop (like the one given above)

            - Labeled Loop -> 'label: loop {}
                fn main() {
                    let mut age = 42;
                    'outer: loop {
                        println!("Outer loop: age = {}", age);
                        
                        'inner: loop {
                            println!("Inner loop: age = {}", age);

                            if age >= 50 {
                                println!("Vansh is OLD now!");
                                break 'outer; // Break out of the outer loop
                            }

                            age += 1;
                        }

                        // This line is never reached without the label
                        // because the break 'outer; statement jumps to the outer loop.
                        println!("This line is never reached!");
                    }
                }
            > We use Labeled Loop when dealing with "nested loops"
            > They help in specifying which loop to break out of when you have multiple nested loops.


    > NOTE: Both types of loops ("while" and "loop") can exit using "break"

> BASIC RUST KNOWLEDGE: 
    - In RUST, "main.rs" is the default binary file, which will executed when you command "cargo run".
    - In a typical Rust project structure, the "src/bin" directory can be used to create additional binaries.
        _> Run command: "cargo run --bin <binary_file_name>
        example: "cargo run --bin file1" (no need to write "file1.rs")

    - HOW TO RUN/EXECUTE RUST FILE CODE?
        > if its a part of Rust Project managed by "Cargo", then you may use:
            _> "cargo run" (for running default main.rs)
            _> "cargo run --bin <bin_file_name>" (for running any additional binaries)

        > IF you want to compile and run a Rust file directly without using Cargo
            _> It's a basic compilation command using the Rust compiler "(rustc)"
            _> Produces an executable file "(<binary_file_name.exe)"
            Commands:
                _> Navigate to the directory where the rust binary file is present
                _> `rustc file1.rs`
                _> `./file1`
            _> This will execute the rust code directly using "Rust Compiler"

    - "cargo clean" - removes the "target" folder

> "match" keyword (Control Flow)
    - used to "add logic to program"
    - similar to if..else
    - some what like switch..case
    - difference: its "EXHAUSTIVE"
        _> MEANING: "all options/outcomes of the expression must be accounted for (i.e. have some logic/output given for each n' every outcome)

        _> this make it MORE ROBUST

    - prefer "match" over "else..if" WHEN WORKING WITH SINGLE VARIABLE
    - NOTE: "match" works on `expressions`, not `statements`
    _> example:
        fn main() {
            let some_bool = true; // expression can have only two outcomes (either T or F)
            match some_bool {
                true => println!("its true"),
                false => println!("its false"),
            }
        }

        // OR

        fn main() {
            let some_int = 5;
            match some_int {
                1 => println!("its 1"),
                2 => println!("its 2"),
                3 => println!("its 3"),
                _ => println!("its something else"),
            }
        }
    - NOTE: "_" is like a wildcard logic, when we recieve any outcome which we haven't listed before

> Working with Data | "enum" keyword
    - Enum allows you to work with data in a "type-safe manner"

    - in enum, Data can be one of the multiple listed possibilities
        -> Each possibility is called a "variant"

    - example:
        enum Direction {
            Up,
            Down,
            Left,
            Right
        }

    - More robust programs when paired with "match" keyword

> Working with Data | "struct" keyword
    - similar to "Objects" in Javascript
    - A type that contains multiple pieces of data
    - Each piece of data is called a “field"
        -> All or nothing - cannot have some pieces of data and not others
        -> MEANING: when using "struct", we must utilize/fill data for all the "fields"
    - Makes working with data easier
        -> Similar data can be grouped together
    - "Fields" can be accessed using a dot (.)
    - example:
        struct ShippingBox {
            depth: i32,
            width: i32,
            height: i32,
        }

        let my_box = ShippingBox {
            depth: 50,
            width: 30,
            height: 20,
        };

        println!("the box is {} units tall", my_box.height);

> Working with Data | "tuples"
    - A type of "record"
    - Can contain any number of fields (of different types as well)
        -> Use "struct" when more than 2 or 3 fields
    - No need to name fields
    - Allow for anonymous data access
    - Can be "destructured" easily into variables

> Expressions
    - Rust is an expression-based language
        -> In Rust, most constructs are expressions, meaning they produce a value.
        -> Even control flow constructs like "if", "else", and "match" are expressions that result in a value.
            - example:

                let x = 5;
                let y = if x > 0 { "positive" } else { "non-positive" };
                // Here, the value of `y` depends on the result of the "if" expression.

        -> Expression values coalesce to a single point
            - The values of multiple expressions can be combined into a single point
            - example: 

                let result = {
                    let a = 2;
                    let b = 3;
                    a * b  // The value of this expression is the value of the block
                };

        -> Can be used for nesting logic

> MEMORY Concepts in Rust
    > Addresses
        - All data in memory has an “address”
            -> Used to locate data
            -> Always the same - only data changes
        - Usually don't utilize addresses directly
            -> Variables handle most of the work

    > Offsets
        - Used to locate Items a specific address
            -> Offsets begin at 0
        - Represent the number of bytes away from the original address
            -> Normally deal with indexes instead
    
    ex: 
                       OFFSET
         +------+------+------+------+------+
      A  |      | 0    | 1    | 2    | 3    |
      D  |  0   | _    | _    | _    | _    |
      R  |  4   | _    | *    | _    | _    |
      E  |  12  | _    | _    | _    | _    |
      S  |  16  | _    | _    | _    | _    |
      S  +------+------+------+------+------+

        At * location,
        In computer: "Address 4, Offset 1"
        In program: "Data[1]"

        Thus, "Data" array represents the ADDRESS of data
        & "index" of this array represents OFFSET to access a specific element in "Data"

> Ownership Model
    - Ownership is what allows RUST :
        -> to execute code in "performant" manner
        -> ensures the code runs correctly under various circumstances

    - Programs must track memory
        -> If they fail to do so, a "leak” occurs
    - Rust utilizes an “ownership” model to manage memory
        -> The “owner” of memory is responsible for cleaning up the memory
    - Memory can either be “moved” or “borrowed”
    - Memory gets automatically "dropped" by the owner, once the owner fn. block ends 

    NOTE: SO FAR IN LEARNINGS, WE'VE BEEN "MOVING" THE MEMORY

    - ex:
    ```Example 1: Ownership Transfer/Move
    enum Light {
        Bright,
        Dull,
    }

    fn display_light(light: Light) {
        match light {
            Light::Bright => println!("bright"),
            Light::Dull => println!("dull"),
        }
    }

    fn main() {
        let dull = Light::Dull;
        display_light(dull);  // Ok, ownership transferred
        display_light(dull);  // Error: value borrowed here after move
            // In first "display_light" fn. call, the "dull" variable's ownership is transferred from "main" fn. -> "display_light" fn.
            // It uses it, executes its code, and then deletes the "dull" in memory, after code execution of display_light.
            // In second attempt to call "display_light" fn., there is no "dull" in memory (since deleted in last call)
            // THUS, IT GIVES AN ERROR!
    }
    ```

    ```
    enum Light {
        Bright,
        Dull,
    }

    fn display_light(light: &Light) {
        match light {
            Light::Bright => println!("bright"),
            Light::Dull => println!("dull"),
        }
    }

    fn main() {
        let dull = Light::Dull;
        display_light(&dull);  // Passing a reference to dull
        display_light(&dull);  // Passing another reference to dull
    }
        // Here, we are allowing "display_light" fn. to borrow "dull", in the First fn. call
        // Also, "&Light" makes sure that the display_light just borrows the argument, and IT IS NOT ALLOWED TO DELETE IT
        // THUS, We can make the second display_light fn. call SUCCESSFULLY!
        // at the end of main() fn. execution, the "dull" will be deleted from memory :)

    ```

    - KEY NOTE:
        -> Use of "dull" and "&dull" as argument

        - "Ownership Transfer"
            -> "display_light(dull)" means you are `transferring ownership` of the "dull" variable to the "display_light" function.
            -> This would imply that after the call, you can't use dull in the main function anymore.

        - "Borrowing a Reference"
            -> "display_light(&dull)" means you are `borrowing a reference` to the "dull" variable.
            -> The function "display_light" can use the value pointed to by the reference, but ownership remains with the main function.
            -> You can still use dull after the call to `display_light(&dull)`.

    - WHY DO ALL THIS?! REASON?!
        -> Memory Safety & Management
            - Ownership and borrowing prevent the creation of "dangling pointers", which occur when a pointer references memory that may have been freed.
            - Ownership ensures that when a variable goes out of scope, the associated memory is freed, preventing memory-related bugs.

        -> Efficient 
            - Rust's ownership system allows for efficient memory management without sacrificing runtime performance.
            The ownership model eliminates the need for garbage collection while ensuring memory safety.

> Data Collections | "impl"
    > "impl" is used to define methods and associated functions for a type.
    >  It allows you to encapsulate functionality within the context of a particular "struct" or "enum".

    > Associated Fn. V/S Method | w.r.t impl
        -> Associated Function:
            - Doesn't take self as a parameter.
            - Often used as constructors or utility functions related to the type.
            - Invoked using the type name, not an instance.

            - ex:
            ```
            struct Temperature {
                degrees_f: f64,
            }

            impl Temperature {
                fn freezing() -> Self {
                    Self { degrees_f: 32.05 }
                }
            }

            let cold = Temperature::freezing();
            ```

        -> Method:
            - Takes self (reference or mutable reference) as the first parameter.
            - Acts on an instance of the type.
            - Invoked using an instance of the type.

            - ex:
            ```
            struct Temperature {
                degrees_f: f64,
            }

            impl Temperature {
                fn show_temp(&self) {
                    println!("{} degrees F", self.degrees_f);
                }
            }

            let hot = Temperature { degrees_f: 80.93 };
            hot.show_temp();
            ```


    > Best Practices:
        -> "Self" and Constructors:
            - Constructors are often implemented as associated functions returning "Self".
            - "Self" is an alias for the `type` implementing the methods, providing flexibility when the type name changes.

> Data Collections | Vector Data Structure
    > allows you to store "Multiple pieces of Data"
        - Must be the same type
    > Used for lists of information
    > Can add, remove, and traverse the entries(data)
        
    > Implementaion:
        > we use "vec!" macro, 
            > let my_numbers = vec![1,2,3];
            OR
        > use "new" function which is implemented on the "Vec" struct
            > let mut my_numbers = Vec::new();
            > my_numbers.push(1); // index 0
            > my_numbers.push(2); // index 1
            > my_numbers.push(3); // index 2
            > my_numbers.pop(); // removes the last item you've added
            > my_numbers.len(); // returns the length of vector variable

            // ACCESS ITEM from Vector (using "Slice" concept)
            > let num_two = my_numbers[1];

            // TRAVERSE thr' a Vector
                // use "for in loop"
                // it is specifically used to iterate thr' data collections/structures
            > for num in &my_numbers {
                println!("{}", num);
            }
                // use "borrowing" in "for in loop", else the data will be moved in the loop, unavailable for further use.

    > NOTE: 
        -> While a "Vector" shares some characteristics with a "Stack" (last-in, first-out), it doesn't strictly enforce the stack's `LIFO` behavior. -> -> Elements can be inserted or removed from any position within the vector.

> Data Collections | Strings Data Types
    > Two commonly used types of strings
        > String- owned
        > &str - borrowed String slice
    > Must use an "owned" String to store in a "struct"
        > WHY SO?:
            - when we try to store borrowed data in struct, it won't compile
            - struct is responsible for cleaning-up its own memory
            - however, if its using a borrowed data, its not allowed to do so, thus A COMPILE ERROR!

    > Use "&str" when passing to a function
    > example 1: 
        fn print_it(data: &str) {
            println!("{}", data);
        }

        fn main() {
            print_it("a string slice");

            // different ways to implement "Owned" String
            let owned_string = "owned_string".to_owned();
            let another_owned = String::from("another");
            print_it(&owned_string);
            print_it(&another_owned);
        }

    > NOTE:
        - if you write normal string (ex: "hello amigo"), then it is treated as a String Slice.
        - if you want to specifically use Owned string, you will have to mention it correctly in code.

> "derive" functionality
    > SO FAR, in order to print enum variants, we had to use "match" & write print statement for each variant.

    > `derive` is a special macro, which can be applied to "enum" and "struct" ONLY!

    > `derive` allows you to automatically implement certain traits for your custom data types, saving you from writing repetitive boilerplate code

    > ex:
        #[derive (Debug)]
        enum Position {
            Manager,
            Supervisor,
            Worker,
        }

        #[derive (Debug)]
        struct Employee {
            position: Position,
            work_hours: i64,
        }

        fn main() {
            let me = Employee {
                position: Position:: Worker,
                work_hours: 40,
            };

            // Using derived Debug trait (on ENUM) for printing
            println!("{:?}", me.position);

            // Using derived Debug trait (on STRUCT) for printing
            println! ("{:?}", me);
        }

    > Important Note:
        - All fields within the struct or enum also have to derive that functionality
        - TRY REMOVING "#derive" for "enum" in above ex.
            -> the "derive" on "struct" will give an ERROR, since it has "Position" field

> "enum" revisited
    > enum is not limited to just plain variants
        - Each variant can optionally contain additional data

    > inside the parenthesis, we mention the data type (int, char, str, OR struct, enum, etc...)
    > example 1:
        struct Mouse {
            LeftClick,
            RightClick,
            MiddleClick,
            Scroll(i32),
            Move(i32, i32),
        }

    > example 2:
        enum PromoDiscount {
            NewUser,
            Holiday(String)
        }

        enum Discount {
            Percent(f64),
            Flat(i32),
            Promo(PromoDiscount),
            Custom(String),
        }

    > ADVANCED "match"
        - conventionally, we write:
            let n = 3;
            match n {
                3 => println!("three"),
                _ => println!("number: {}", n),
            }

        - with advanced match, we write:
            match n {
                3 => println!("three"),
                other => println!("number: {}", other),
            }

> REFER Task 14a,b THOROUGHLY to understand Advanced match

> Working with Data | "Option"
    > A type that may be one of two things
        - Some data of a specified type
        - Nothing
    > Used in scenarios where data may not be required or is unavailable
        - Form field not filled out
        - Unable to find something
        - Ran out of items in a list

    > BASIC: 
    enum Option<T> {
        Some(T),
        None,
    }
        > "<T>": data type of field
        > Some(T): Represents the presence of a value of type `T`.
        > None: Represents the absence of a value.

    > Note: use "Option<type>" to declare an optional type

> DOCUMENTATION generation (GREAT TOOL FOR EXAMINING CODE)
    > usually Normal Comments in Rust are denoted by prefix as "//"
    > to denote a Documentation Comments, use "///" as prefix

    > in Rust, if you want to document code explanations & generate them separately for better view, do the following:
    
        -> use "///" to denote a documentation

        -> in CLI, run "cargo doc --open"
            _> "cargo doc" generates a documentation file for you
            _> "--open" simply opens that file directly after generation

        -> This creates doc files (html pages) for your documentation in the "target" folder
        
> Rust Standard Library Docs
    > run "rustup doc" in CLI

    > this will open the rust documentations, where you can search for specific functionality that you want to implement in Rust (on any particular)

    > If you already know the name of what you are looking for, the fastest way to find it is to use the search bar at the top of the page

    > EXPLORE!

> EXTRA KNOWLEDGE: "assert" macro
    > How it works?
        -> The assert macro takes a boolean expression as its argument. 
        -> If the expression evaluates to true, nothing happens, and the program continues execution as normal. 
        -> However, if the expression evaluates to false, the assert macro will "panic", causing the program to terminate immediately.

        -> When an assertion fails, it prints an error message containing the failed expression along with the file and line number where the assertion occurred.

    > "assert" is commonly used in testing to verify that certain conditions hold true. It's especially useful for writing unit tests and ensuring that functions and code blocks behave as expected under various conditions.

> Working with Data | "Result" data type
    > A data type that contains one of two types of data:
        -> "Successful" data
        -> "Error" data
    > Used in scenarios where an action needs to be taken, but has the possibility of failure
        -> Copying a file
        -> Connecting to a website

    _> SYNTAX:
        enum Result <T, E> {
            Ok(T),
            Err(E)
        }

    _> Example:
        enum SoundData {
            alert,
            notification
        }
        
        fn get_sound(name: &str) -> Result<SoundData, String> {
            if name == "notification" {
                Ok(SoundData::notification)
            } else {
                Err("Sound Data Not Found!".to_owned())
            }
        }

        let sound = get_sound("notification");
        match sound {
            Ok(_) => println!("Sound Data Found!"),
            Err(e) => println!("error!{e}")
        }

> Data Structures | Hashmap
    > Collections that stores data as key-value pairs
        - Data is located using the "key"
        - The data is the "value"
    > Similar to "Dictionary" in Python
    > Very fast to retrieve data using the key
    > Note: here, Data is stored in Random order (Unlike in Vector, where Data is stored in the same order as inserted)

> Closures
    > Similar to "lambda function"
    _> Example:
        fn main() {
            let add_one = |x| x + 1;
            println!("Result: {}", add_one(5)); // Prints: Result: 6
        }

> Map Combinator
   fn maybe_num() -> Option<i32> {}

   fn maybe_word() -> Option<String> {} 

    fn main() {

        // let plus_one = match maybe_num {
        //     Some(num) => Some(num + 1),
        //     None => None,
        // };

        // Instead of doing the above, where you're getting a "Some(num)" and returning another "Some(num + 1)", do the following:

        let plus_one = maybe_num().map(|num| num + 1);
        // This will return the same thing if we get "Some()", else it wont store anything if we get "None"

        // Chained Map
        let word_length = maybe_word()
            .map(|word| word.len())
            .map(|len| len * 2)
    }

> Option Combinator Pattern
    Using various functions applicable to results of "Option" Type

> Iterator
    > Example:

        let numbers_vector = vec![1,2,3,4,5];

        // Instead of using:
            for num in numbers_vector {
                plus_one_vector.push(num + 1);
            }
        
        // We can use ".iter()" method:
            let nums = vec![1,2,3,4,5];
            let plus_one: Vec<_> = nums
                    .iter()
                    .map(|num| num + 1)
                    .collect(); 
            println!("{:?}", plus_one);

    NOTE: ".collect()" simply "TRANSFORMS AN ITERATOR INTO A COLLECTION (specified at "plus_one: Vec<_>")

    > THUS, We can use iterator with many other functions like 
        ".filter()", 
        ".count()", 
        ".last()",
        ".min()" & ".max()"
        "take(4)"

> "Range" Type
    > a "range" is simply an AUTOMATED WAY to create a range of values.
    > SYNTAX:
        let range = 1..=3; // this will exclude the last term
        let range = 1..3; // this will include the last term as well
    > NOTE: 
        -> You will have to use "for in" loop or some loop to print Range values. 
        -> Can't just use "{:?}" debug Trait here to directly print values. (TRY IT, WON'T WORK CORRECTLY)

> "if let" Concept
    > Basically a substitute for "match" expression for handling pattern matching on enums or structs when you're interested in only one particular case and want to ignore the rest.

    > For instance:
        -> In cases where results can be "Some()" or "None", when we want to print them, or perform any further task, we have to use the "match" keyword
            _> example:
            let maybe_user = Some("Jerry");
            match maybe_user {
                Some(user) => println!("user : {:?}", user),
                None => println!("no user"),
            }
        
        -> Now, in the case when we want to perform something with the Some or None thing alone (if..let), or both cases (if..let..else):
            _> example:
            if let Some(user) = maybe_user {
                println!("user is: {:?}", user);
            } else {
                println!("no user");
            }

    > NOTE: It's particularly useful when you have a simple match pattern with only one arm.

> "while let" Concept
    -> Similar to "if let", but creates a while loop, till the certain parameter in consideration becomes None.

    -> It's particularly useful when working with Iterators, because alotta iterators may return a Optional Data

    Advances the iterator and returns the next value. Returns "None" when iteration is finished.

